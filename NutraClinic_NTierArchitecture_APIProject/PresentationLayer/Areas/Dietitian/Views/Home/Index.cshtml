@using Newtonsoft.Json

@model PresentationLayer.Areas.Dietitian.ViewModels.DietitianDashboardVM
@{
	ViewData["Title"] = "Dietitian Dashboard";
	Layout = "~/Views/Shared/_Layout.cshtml";
}

<section id="home" class="dt-hero-section">
	<video autoplay muted loop playsinline class="dt-bg-video">
		<source src="~/videos/dietitianhome.mp4" type="video/mp4">
	</video>
	<div class="dt-hero-overlay"></div>
	<div class="dt-hero-content text-center">
		<h1>Hi, Dr. @Model.FullName</h1>
		<p>Welcome to your personal dashboard</p>
		<a href="#profile" onclick="scrollToBlock('event', 'profile')" class="btn btn-outline-light scroll-link">Go to Profile</a>
	</div>
</section>

<section id="profile" class="dt-profile-section">
	<div class="container d-flex align-items-center justify-content-center">
		<div class="row w-100 dt-profile-row">
			<div class="col-md-5 text-center">
				<img src="@Model.ProfilePhotoUrl" class="dt-profile-img" alt="Profile photo" />
			</div>
			<div class="col-md-7 dt-profile-info">
				<h2>@Model.FullName</h2>
				<p><strong>Email:</strong> @Model.Email</p>
				<p><strong>Working Days:</strong> @Model.WorkingDays</p>
				<p><strong>Working Hours:</strong> @Model.WorkingHours</p>
				<button onclick="loadEditForm('/Dietitian/Profile/Edit/@Model.DietitianId')" class="btn btn-outline-light">Edit Profile</button>
			</div>
		</div>
	</div>
</section>

<div id="dt-edit-overlay" class="dt-edit-overlay" style="display:none;">
	<div class="dt-edit-backdrop"></div>
	<div class="dt-edit-modal">
		<button type="button" class="dt-edit-close" aria-label="Close">&times;</button>
		<div id="dt-edit-modal-body" class="dt-edit-modal-body">
		</div>
	</div>
</div>


<section id="calendar" class="dt-calendar-section">
	<div class="video-bg">
		<video autoplay muted loop playsinline>
			<source src="/videos/dietitiancalendar.mp4" type="video/mp4">
		</video>
		<div class="overlay"></div>
	</div>

	<div class="container text-center mb-4">
		<h2 class="dt-calendar-title">My Calendar</h2>
		<p class="dt-calendar-desc">Approved appointments for the next 30 days</p>
	</div>

	<div class="container">
		<div class="dt-calendar-table-container">
			<table class="dt-calendar-table">
				<thead>
					<tr>
						<th>Date</th>
						<th>Appointments</th>
					</tr>
				</thead>
				<tbody>
					@{
						var today = DateTime.Today;
						var end = today.AddDays(30);

						List<DayOfWeek> ParseWorkingDays(string? days)
						{
							if (string.IsNullOrWhiteSpace(days))
								return new List<DayOfWeek> { DayOfWeek.Monday, DayOfWeek.Tuesday, DayOfWeek.Wednesday, DayOfWeek.Thursday, DayOfWeek.Friday };

							var map = new Dictionary<string, DayOfWeek> {
					{ "sun", DayOfWeek.Sunday },
					{ "mon", DayOfWeek.Monday },
					{ "tue", DayOfWeek.Tuesday },
					{ "wed", DayOfWeek.Wednesday },
					{ "thu", DayOfWeek.Thursday },
					{ "fri", DayOfWeek.Friday },
					{ "sat", DayOfWeek.Saturday }
					};

							days = days.ToLowerInvariant().Trim();

							if (days.Contains("-"))
							{
								var split = days.Split('-');
								var start = map[split[0].Substring(0, 3)];
								var endDay = map[split[1].Substring(0, 3)];
								var result = new List<DayOfWeek>();

								int i = (int)start;
								while (true)
								{
									result.Add((DayOfWeek)i);
									if ((DayOfWeek)i == endDay) break;
									i = (i + 1) % 7;
								}
								return result;
							}

							return days.Split(',')
							.Select(x => map[x.Trim().Substring(0, 3)])
							.ToList();
						}

						var workingDays = ParseWorkingDays(Model.WorkingDays);
						bool IsWorking(DayOfWeek dow) => workingDays.Contains(dow);
					}

					@for (var d = today; d <= end; d = d.AddDays(1))
					{
						if (!IsWorking(d.DayOfWeek)) { continue; }

						var dayAppts = Model.ApprovedAppointments
						.Where(a => a.AppointmentDate.Date == d.Date)
						.OrderBy(a => a.StartTime)
						.ToList();

						<tr class="@(dayAppts.Any() ? "has-appt" : "no-appt")">
							<td>
								@d.ToString("ddd, MMM dd", new System.Globalization.CultureInfo("en-US"))
							</td>
							<td>
								@if (dayAppts.Any())
								{
									foreach (var a in dayAppts)
									{
										<div class="appt-item">
											<span class="time">@a.StartTime.ToString(@"hh\:mm") - @a.EndTime.ToString(@"hh\:mm")</span>
											<span class="client">@a.UserFullName</span>
										</div>
									}
								}
								else
								{
									<span class="no-appt-text">No appointment</span>
								}
							</td>
						</tr>
					}
				</tbody>

			</table>
		</div>
	</div>
</section>



@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        const overlay = document.getElementById('dt-edit-overlay');
        const modalBody = document.getElementById('dt-edit-modal-body');
        const closeButton = document.querySelector('.dt-edit-close');

        function openEditModal(formHtml) {
            modalBody.innerHTML = formHtml;
            overlay.style.display = 'flex';
        }

        function closeEditModal() {
            if (overlay) overlay.style.display = 'none';
            if (modalBody) modalBody.innerHTML = '';
        }

        if (closeButton) {
            closeButton.addEventListener('click', closeEditModal);
        }

        if (overlay) {
            overlay.addEventListener('click', function (e) {
                if (e.target === overlay) {
                    closeEditModal();
                }
            });
        }

        document.addEventListener('click', function (e) {
            if (e.target && e.target.id === 'edit-cancel-btn') {
                closeEditModal();
            }
        });

        function showToast(message, type = 'success') {
            Swal.fire({
                toast: true,
                position: 'bottom-end',
                showConfirmButton: false,
                timer: 3000,
                icon: type,
                title: message,
                background: 'rgba(0,0,0,0.75)',
                color: '#fff'
            });
        }

        function loadEditForm(url) {
            fetch(url)
                .then(res => res.text())
                .then(html => {
                    openEditModal(html);
                    bindEditFormSubmitHandler();
                })
                .catch(() => showToast('Form yüklenemedi!', 'error'));
        }

        function bindEditFormSubmitHandler() {
            const form = document.getElementById("dietitian-edit-form");

            if (!form) {
                console.warn("⚠️ Edit form bulunamadı!");
                return;
            }

            form.removeEventListener('submit', submitHandler);
            form.addEventListener("submit", submitHandler);

            function submitHandler(e) {
                e.preventDefault();

                
                Swal.close(); 

                Swal.fire({
                    title: "Are you sure?",
                    text: "Do you want to save the changes?",
                    icon: "question",
                    showCancelButton: true,
                    confirmButtonText: "Yes, save it!",
                    cancelButtonText: "Cancel",
                    customClass: {
                        popup: 'blur-popup',
                        confirmButton: 'swal-btn-confirm',
                        cancelButton: 'swal-btn-cancel'
                    },
              
                    didOpen: () => {
                        const swalContainer = document.querySelector('.swal2-container');
                        if (swalContainer) {
                            swalContainer.style.zIndex = '20000'; 
                        }
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        const formData = new FormData(form);

                        fetch(form.action, {
                            method: "POST",
                            body: formData
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                closeEditModal();

                                Swal.fire({
                                    title: "Updated!",
                                    text: "Your profile has been successfully updated.",
                                    icon: "success",
                                    timer: 2500,
                                    showConfirmButton: false,
                                    toast: false,
                                    position: 'center',
                                    background: 'rgba(0,0,0,0.85)',
                                    color: '#fff',
                                    didOpen: () => {
                                        const swalContainer = document.querySelector('.swal2-container');
                                        if (swalContainer) {
                                            swalContainer.style.zIndex = '20000'; 
                                        }
                                    }
                                });
                                setTimeout(() => {
                                    window.location.href = "/Dietitian/Home/Index";
                                }, 2500);

                            } else {
                                Swal.fire("Error", data.error || "Update failed.", "error");
                            }
                        })
                        .catch(() => {
                            Swal.fire("Error", "Something went wrong!", "error");
                        });
                    }
                });
            }
        }
    </script>
}
